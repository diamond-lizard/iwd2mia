#!/usr/bin/python3.6
# -*- coding: utf-8 -*-

# Copyright: (c) 2019, diamond-lizard
# GNU Affero General Public License 3 (see COPYING or https://www.gnu.org/licenses/agpl-3.0.en.html)

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'community'
}

DOCUMENTATION = '''
---
module: bspatch

short_description: Apply binary patches using bspatch

version_added: "0.1"

description:
    - "Apply binary patches using bspatch"

options:
    oldfile:
        description:
            - The file to be patched
        required: true
    newfile:
        description:
            - The file to be generated by bspatch from oldfile and patchfile
        required: true
    patchfile:
        description:
            - A binary patch built by bsdiff
        required: true

author:
    - diamond-lizard (@diamond-lizard)
'''

EXAMPLES = '''
# Patch a file
- name: Patch foo using bar, creating baz
  bspatch:
    oldfile: foo
    patchfile: bar
    newfile: baz
'''

RETURN = '''
'''

from ansible.module_utils.basic import AnsibleModule
import os
import subprocess

def bspatch(oldfile, newfile, patchfile):
    try:
        lines = subprocess.check_output(['bspatch', oldfile, newfile, patchfile],stderr=subprocess.STDOUT).decode("utf-8")
    except subprocess.CalledProcessError as e:
        return(e.output.decode("utf-8").splitlines()[0])
    else:
        return(lines)

def main():
    # define available arguments/parameters a user can pass to the module
    module_args = dict(
        oldfile=dict(type='str', required=True),
        newfile=dict(type='str', required=True),
        patchfile=dict(type='str', required=True),
    )

    # the AnsibleModule object will be our abstraction working with Ansible
    # this includes instantiation, a couple of common attr would be the
    # args/params passed to the execution, as well as if the module
    # supports check mode
    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True
    )

    oldfile = os.path.expanduser(module.params['oldfile'])
    newfile = os.path.expanduser(module.params['newfile'])
    patchfile = os.path.expanduser(module.params['patchfile'])

    output = bspatch(oldfile, newfile, patchfile)

    if output == '':
        module.exit_json(changed=True, creates=newfile)
    else:
        module.fail_json(msg=output)

if __name__ == '__main__':
    main()
